<?php

namespace Fuzzy\Inference\Method;

use Fuzzy\Fuzzification\Fuzzification;
use Fuzzy\Defuzzification\Centroid;
/**
 * Generated by PHPUnit_SkeletonGenerator on 2012-11-12 at 00:00:08.
 */
class MamdaniTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var Fuzzification
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $rules = "[tamanho(medio)]|[sabor(bom)]:[satisfação(boa)],[tamanho(medio)]|[sabor(bom)]:[satisfação(boa)]";
        
        $fuzzification = new Fuzzification("trapezoid");
        $fuzzification->addGroup("tamanho", "medio", array(28,30,40,50,60));
        $fuzzification->addGroup("sabor", "bom", array(7,8,9,10));
        $fuzzification->addGroup("satisfação", "boa", array(7,8,9,10));
        $fuzzification->run(41);
        
        $centroid = new Centroid(array("0.6" => array(17, 8), "0.2" => array(29, 16)));
        $this->object = new Mamdani($rules, $fuzzification, $centroid);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->object = null;
    }
    /**
     * @covers Fuzzy\Inference\Method\MethodAbstract::getRules
     */
    public function testRules()
    {
        $expected = array(
            'data' =>   array(array("[tamanho(medio)]", "tamanho(medio)", "medio"),
                        array("|"),
                        array("[sabor(bom)]", "sabor(bom)", "bom"),
                        array(":"),
                        array("[satisfação(boa)]", "satisfação(boa)", "boa")),
            'max' => array(1),
            'min' => array(),
            'then' => array(array(7,8,9,10, 'trapezoid' => 0))
        );
        
        $this->assertSame($expected, $this->object->getRules());
    }
    
    /**
     * @covers Fuzzy\Inference\Method\Mamdani::parseRule
     */
    public function testRegex() 
    {
        $expected = array(
        	array("[tamanho(medio)]", "tamanho(medio)", "medio"),
            array("|"),
            array("[sabor(bom)]", "sabor(bom)", "bom"),
            array(":"),
            array("[satisfação(boa)]", "satisfação(boa)", "boa")
        );
        
        preg_match_all('/\[(.*?\((.*?)\))\]|[|&:]/', "[tamanho(medio)]|[sabor(bom)]:[satisfação(boa)]", $structure, PREG_SET_ORDER);
        $this->assertSame($structure, $expected);
    }
}
